"use strict";

var flat = {};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageResourceStatus = {
    INITIATING: 'Initiating',
    FAILED: 'Failed',
    LOADING: 'Loading',
    LOADED: 'Loaded'
};

var ImageResource = function () {
    function ImageResource() {
        _classCallCheck(this, ImageResource);

        this.progress = 0;
        this.status = ImageResourceStatus.INITIATING;
        this.onLoad = null;
        this.onProgress = null;
        this.onStatusChanged = null;
    }

    _createClass(ImageResource, [{
        key: 'setProgress',
        value: function setProgress(progress) {
            this.progress = progress;

            if (this.onProgress) {
                this.onProgress(this.progress);
            }
        }
    }, {
        key: 'setStatus',
        value: function setStatus(status) {
            this.status = status;

            if (this.onStatusChanged) {
                this.onStatusChanged(this.status);
            }

            switch (this.status) {
                case ImageResourceStatus.INITIATING:
                    break;

                case ImageResourceStatus.FAILED:
                    break;

                case ImageResourceStatus.LOADING:
                    break;

                case ImageResourceStatus.LOADED:
                    this.progress = 1;
                    if (this.onLoad) {
                        this.onLoad();
                    }
                    break;

                default:
            }
        }
    }, {
        key: 'setTriggers',
        value: function setTriggers() {
            var _this = this;

            if (this.img) {
                this.promise = new Promise(function (resolve, reject) {
                    _this.img.onloadstart = function () {
                        _this.setStatus(ImageResourceStatus.LOADING);
                    };
                    _this.img.onprogress = function (progress) {
                        _this.progress = _this.setProgress(progress);
                    };
                    _this.img.onload = function () {
                        _this.setStatus(ImageResourceStatus.LOADED);
                        resolve(_this);
                    };
                    _this.img.onerror = function (error) {
                        _this.setStatus(ImageResourceStatus.FAILED);
                        reject(error);
                    };
                });
            }
        }
    }, {
        key: 'setSource',
        value: function setSource(source) {
            if (source) {
                if (source instanceof Image) {
                    if (source.src) {
                        this.img = source;

                        if (source.completed) {
                            this.setStatus(ImageResourceStatus.LOADED);
                        } else {
                            this.setTriggers();
                        }
                    } else {
                        console.error('ImageResource requires a proper source.');
                    }
                } else if (typeof source == 'string') {
                    this.img = new Image();

                    this.setTriggers();

                    this.img.src = source;
                }

                return this.promise;
            } else {
                console.error('ImageResource requires a proper source.');
            }
        }
    }, {
        key: 'loaded',
        get: function get() {
            return this.status == ImageResourceStatus.LOADED;
        }
    }], [{
        key: 'IMAGE_STATUS',
        get: function get() {
            return ImageResourceStatus;
        }
    }]);

    return ImageResource;
}();

var Resources = function () {
    function Resources() {
        _classCallCheck(this, Resources);

        this.imageCache = new Map();
    }

    /**
    * @method addImage - Add an image resource and starts loading it if possible.
    * @param {Object|string} imgSource - image source. It may be an img element object or the img url string.
    * @param {string} [alias] - image alias used to retrieve resource. if imgSource is a string and alias is not specified, then the alias will be set to the imgSource.
    * @return {Promisse} - promise that fullfills when the resource has loaded.
    */


    _createClass(Resources, [{
        key: 'addImage',
        value: function addImage(imgSource, alias) {
            if (typeof imgSource == 'string' && !alias) {
                alias = imgSource;
            }

            var newImageResource = new ImageResource();

            if (!alias) {
                console.log('Resources.addImage: alias not set and thus this image will not be cached!');
            } else {
                if (this.imageCache.has(alias)) {
                    window.alert('Resources.addImage: image alias "' + alias + '" is already being used and will be overwritten.');
                }

                this.imageCache.set(alias, newImageResource);
            }

            return newImageResource.setSource(imgSource);
        }

        /**
        * @method addImages - Same as addImage but for multple image resources.
        * @param {Array} sources - each element should be an array that matches the arguments of the addImage method: [imgSource, alias].
        * @return {Promisse} - promise that fullfills when all resources have loaded.
        */

    }, {
        key: 'addImages',
        value: function addImages(sources) {
            if (!(sources instanceof Array)) {
                console.error('Resources.addImages: argument is not an array');

                return;
            }

            var promises = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var aguments = _step.value;

                    promises.push(this.addImage.apply(this, aguments));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return Promise.all(promises);
        }

        /**
        * @method getImage - returns the img element object respective to the given alias.
        */

    }, {
        key: 'getImage',
        value: function getImage(alias) {
            var cache = this.imageCache.get(alias);

            if (!cache) {
                console.error('Resources.getImage: could not find alias "${alias}"');
            }

            return cache;
        }
    }]);

    return Resources;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
