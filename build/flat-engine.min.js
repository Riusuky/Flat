'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
*/
var Engine = function () {
    /**
    * @constructor
    */
    function Engine() {
        _classCallCheck(this, Engine);

        if (Engine.instance instanceof Engine) {
            console.error('Engine.constructor: Engine instance already exists.');
            return null;
        }

        Engine.instance = this;

        this.lastTime = Date.now();
        this.gameObjectSet = new Set();
        this.collisionCandidateSet = new Set();
        this.keyCallbackSet = new Set();
        this.mouseCallbackSet = new Set();

        document.addEventListener('keyup', this.handleKeyEvents.bind(this));
        document.addEventListener('keydown', this.handleKeyEvents.bind(this));
        document.addEventListener('keypress', this.handleKeyEvents.bind(this));

        if (!Render) {
            console.error('Engine.constructor: Render class is not defined.');
        } else if (!(Render.instance instanceof Render)) {
            console.error('Engine.constructor: There is no render instance to subscribre mouse events.');
        } else {
            this.render = Render.instance;

            this.render.canvas.addEventListener('mouseover', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('mousemove', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('mouseleave', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('mouseout', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('click', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('auxclick', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('mousedown', this.handleMouseEvents.bind(this));
            this.render.canvas.addEventListener('mouseup', this.handleMouseEvents.bind(this));
        }
    }

    _createClass(Engine, [{
        key: 'handleKeyEvents',
        value: function handleKeyEvents(event) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.keyCallbackSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var callback = _step.value;

                    callback(event);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: 'handleMouseEvents',
        value: function handleMouseEvents(event) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.mouseCallbackSet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var callback = _step2.value;

                    callback(event);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: 'start',
        value: function start() {
            requestAnimationFrame(this.routine.bind(this));
        }
    }, {
        key: 'routine',
        value: function routine() {
            var deltaTime = (this.currentTime - this.lastTime) / 1000;

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.gameObjectSet[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var gameObject = _step3.value;

                    gameObject.earlyUpdate(deltaTime);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.checkForCollisions();

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.gameObjectSet[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _gameObject = _step4.value;

                    _gameObject.lateUpdate(deltaTime);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.render.render();

            this.lastTime = this.currentTime;

            requestAnimationFrame(this.routine.bind(this));
        }
    }, {
        key: 'checkForCollisions',
        value: function checkForCollisions() {
            var gameObjects = [].concat(_toConsumableArray(this.collisionCandidateSet));

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = _.filter(gameObjects, 'dynamic')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var dynamicObject = _step5.value;
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                        for (var _iterator6 = gameObjects[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var gameObject = _step6.value;

                            if (gameObject != dynamicObject) {
                                dynamicObject.onCollisionCheck(gameObject);
                            }
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }

        /**
        * @callback routineCallback
        * @param {number} deltaTime - time since the callback was last called.
        */

        /**
        * @method registerUpdateCallback - add a callback to be invoked by the engine.
        * @param {routineCallback} callback
        */

    }, {
        key: 'registerUpdateCallback',
        value: function registerUpdateCallback(gameObject) {
            var registerCollisionCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!GameObject) {
                console.error('Engine.registerUpdateCallback: GameObject class is not defined.');
            } else if (!(gameObject instanceof GameObject)) {
                console.error('Engine.registerUpdateCallback: gameObject is not an instance of GameObject.');
            } else {
                this.gameObjectSet.add(gameObject);

                if (registerCollisionCheck) {
                    this.collisionCandidateSet.add(gameObject);
                }
            }
        }
    }, {
        key: 'registerCollisionCandidate',
        value: function registerCollisionCandidate(gameObject) {
            if (!GameObject) {
                console.error('Engine.registerUpdateCallback: GameObject class is not defined.');
            } else if (!(gameObject instanceof GameObject)) {
                console.error('Engine.registerUpdateCallback: gameObject is not an instance of GameObject.');
            } else {
                this.collisionCandidateSet.add(gameObject);
            }
        }
    }, {
        key: 'registerKeyEventCallback',
        value: function registerKeyEventCallback(callback) {
            if (typeof callback == 'function') {
                this.keyCallbackSet.add(callback);
            } else {
                console.error('Engine.registerKeyEventCallback: callback is not set as a function.');
            }
        }
    }, {
        key: 'registerMouseEventCallback',
        value: function registerMouseEventCallback(callback) {
            if (typeof callback == 'function') {
                this.mouseCallbackSet.add(callback);
            } else {
                console.error('Engine.registerMouseEventCallback: callback is not set as a function.');
            }
        }
    }, {
        key: 'currentTime',
        get: function get() {
            return Date.now();
        }
    }]);

    return Engine;
}();
"use strict";

var flat = {};
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* @class
*/
var ImageObject = function () {
    /**
    * @constructor
    */
    function ImageObject(sprite) {
        var subscribeToRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _classCallCheck(this, ImageObject);

        if (sprite) {
            this.setSprite(sprite);
        }

        this.pivotX = 0.5;
        this.pivotY = 0.5;

        this.x = 0;
        this.y = 0;

        this.originalsizeX = this.originalsizeX || 0;
        this.originalsizeY = this.originalsizeY || 0;

        this.scaleX = 1;
        this.scaleY = 1;

        this.layer = 0;

        this.visible = true;

        if (!Render) {
            console.error('ImageObject.constructor: Render class is not defined.');
        } else if (!(Render.instance instanceof Render)) {
            console.error('ImageObject.constructor: There is no render instance to subscribre to.');
        } else {
            this.render = Render.instance;
            if (subscribeToRender) {
                this.subscribeToRender();
            }
        }
    }

    _createClass(ImageObject, [{
        key: 'mayRender',
        value: function mayRender() {
            return this.sprite instanceof Image && this.visible;
        }
    }, {
        key: 'setSprite',
        value: function setSprite(sprite) {
            var adjustSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (sprite instanceof Image) {
                this.sprite = sprite;

                if (adjustSize) {
                    this.originalsizeX = sprite.naturalWidth;
                    this.originalsizeY = sprite.naturalHeight;
                }
            } else if (sprite) {
                console.error('GameObject.constructor: sprite is not set as a Image object.');
            } else {
                this.sprite = null;
            }
        }
    }, {
        key: 'subscribeToRender',
        value: function subscribeToRender() {
            this.render.registerObject(this);
        }
    }, {
        key: 'unsubscribeToRender',
        value: function unsubscribeToRender() {
            this.render.unregisterObject(this);
        }
    }, {
        key: 'createCopy',
        value: function createCopy() {
            var newCopy = new ImageObject(this.sprite, false);

            this.copyPropertiesTo(newCopy);

            return newCopy;
        }
    }, {
        key: 'copyPropertiesTo',
        value: function copyPropertiesTo(targetImageObject) {
            if (targetImageObject instanceof ImageObject) {
                targetImageObject.sprite = this.sprite;

                targetImageObject.pivot = [this.pivotX, this.pivotY];
                targetImageObject.position = [this.x, this.y];

                targetImageObject.originalsize = [this.originalsizeX, this.originalsizeY];

                targetImageObject.scale = [this.scaleX, this.scaleY];

                targetImageObject.layer = this.layer;
            } else {
                console.error('ImageObject.copyPropertiesTo: targetImageObject is not a ImageObject instance.');
            }
        }
    }, {
        key: 'pivot',
        get: function get() {
            return [this.pivotX, this.pivotY];
        },
        set: function set(pivot) {
            if (pivot instanceof Array && pivot.length == 2 && typeof pivot[0] == 'number' && typeof pivot[1] == 'number') {
                this.pivotX = pivot[0];
                this.pivotY = pivot[1];
            } else {
                console.error('set ImageObject.pivot: pivot is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'position',
        get: function get() {
            return [this.x, this.y];
        },
        set: function set(position) {
            if (position instanceof Array && position.length == 2 && typeof position[0] == 'number' && typeof position[1] == 'number') {
                this.x = position[0];
                this.y = position[1];
            } else {
                console.error('set ImageObject.position: position is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'sizeX',
        get: function get() {
            return this.originalsizeX * this.scaleX;
        }
    }, {
        key: 'sizeY',
        get: function get() {
            return this.originalsizeY * this.scaleY;
        }
    }, {
        key: 'size',
        get: function get() {
            return [this.originalsizeX * this.scaleX, this.originalsizeY * this.scaleY];
        }
    }, {
        key: 'originalsize',
        get: function get() {
            return [this.originalsizeX, this.originalsizeY];
        },
        set: function set(originalsize) {
            if (originalsize instanceof Array && originalsize.length == 2 && typeof originalsize[0] == 'number' && typeof originalsize[1] == 'number') {
                this.originalsizeX = originalsize[0];
                this.originalsizeY = originalsize[1];
            } else {
                console.error('set ImageObject.originalsize: originalsize is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'scale',
        get: function get() {
            return [this.scaleX, this.scaleY];
        },
        set: function set(scale) {
            if (scale instanceof Array && scale.length == 2 && typeof scale[0] == 'number' && typeof scale[1] == 'number') {
                this.scaleX = scale[0];
                this.scaleY = scale[1];
            } else if (typeof scale == 'number') {
                this.scaleX = scale;
                this.scaleY = scale;
            } else {
                console.error('set ImageObject.scale: scale is not an array of size 2 that contains numbers or simply a number.');
            }
        }
    }]);

    return ImageObject;
}();

/**
* @class
*/


var GameObject = function (_ImageObject) {
    _inherits(GameObject, _ImageObject);

    /**
    * @constructor
    */
    function GameObject(sprite) {
        var subscribeToRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var subscribreToEngine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        _classCallCheck(this, GameObject);

        var _this = _possibleConstructorReturn(this, (GameObject.__proto__ || Object.getPrototypeOf(GameObject)).call(this, sprite, subscribeToRender));

        _this.vx = 0;
        _this.vy = 0;

        _this.originalBorderWidth = _this.originalsizeX || 64;
        _this.originalBorderHeight = _this.originalsizeY || 64;

        _this.walkable = false;
        _this.dynamic = false;

        _this.step = [0, 0];

        if (!Engine) {
            console.error('GameObject.constructor: Engine class is not defined.');
        } else if (!(Engine.instance instanceof Engine)) {
            console.error('GameObject.constructor: There is no Engine instance to subscribre to.');
        } else {
            _this.engine = Engine.instance;

            if (subscribreToEngine) {
                _this.engine.registerCollisionCandidate(_this);
            }
        }
        return _this;
    }

    _createClass(GameObject, [{
        key: 'earlyUpdate',
        value: function earlyUpdate(deltaTime) {
            this.step[0] = this.vx * deltaTime;
            this.step[1] = this.vy * deltaTime;
        }
    }, {
        key: 'lateUpdate',
        value: function lateUpdate() {
            this.x += this.step[0];
            this.y += this.step[1];
        }
    }, {
        key: 'hasCollided',
        value: function hasCollided(otherBorder) {
            var myBorder = this.border;

            return Math.min(myBorder.right, otherBorder.right) - Math.max(myBorder.left, otherBorder.left) >= 0 && Math.min(myBorder.top, otherBorder.top) - Math.max(myBorder.bottom, otherBorder.bottom) >= 0;
        }
    }, {
        key: 'onCollision',
        value: function onCollision(otherGameObject) {}
    }, {
        key: 'createCopy',
        value: function createCopy() {
            var newCopy = new GameObject(this.sprite, false);

            this.copyPropertiesTo(newCopy);

            return newCopy;
        }
    }, {
        key: 'copyPropertiesTo',
        value: function copyPropertiesTo(targetGameObject) {
            if (targetGameObject instanceof GameObject) {
                _get(GameObject.prototype.__proto__ || Object.getPrototypeOf(GameObject.prototype), 'copyPropertiesTo', this).call(this, targetGameObject);

                targetGameObject.vx = this.vx;
                targetGameObject.vy = this.vy;

                targetGameObject.originalBorderWidth = this.originalBorderWidth;
                targetGameObject.originalBorderHeight = this.originalBorderHeight;
            } else {
                console.error('GameObject.copyPropertiesTo: targetGameObject is not a GameObject instance.');
            }
        }
    }, {
        key: 'borderWidth',
        get: function get() {
            return this.originalBorderWidth * this.scaleX;
        }
    }, {
        key: 'borderHeight',
        get: function get() {
            return this.originalBorderHeight * this.scaleY;
        }
    }, {
        key: 'originalBorder',
        get: function get() {
            return [this.originalBorderWidth, this.originalBorderHeight];
        },
        set: function set(originalBorder) {
            if (originalBorder instanceof Array && originalBorder.length == 2 && typeof originalBorder[0] == 'number' && typeof originalBorder[1] == 'number') {
                this.originalBorderWidth = originalBorder[0];
                this.originalBorderHeight = originalBorder[1];
            } else {
                console.error('set ImageObject.originalBorder: originalBorder is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'border',
        get: function get() {
            var borderRadius = [+0.5 * this.originalBorderWidth * this.scaleX, 0.5 * this.originalBorderHeight * this.scaleY];

            return {
                top: this.y + borderRadius[1],
                right: this.x + borderRadius[0],
                bottom: this.y - borderRadius[1],
                left: this.x - borderRadius[0]
            };
        }
    }]);

    return GameObject;
}(ImageObject);

/**
* @class
*/


var Player = function (_GameObject) {
    _inherits(Player, _GameObject);

    /**
    * @constructor
    */
    function Player(sprite) {
        var subscribeToEngine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var subscribeToRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var upKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [87, 38];
        var rightKeys = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [68, 39];
        var downKeys = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [83, 40];
        var leftKeys = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [65, 37];

        _classCallCheck(this, Player);

        var _this2 = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, sprite, subscribeToRender, subscribeToEngine));

        _this2.keyMap = new Map();

        _this2.setKeyMap(upKeys, 'up');
        _this2.setKeyMap(rightKeys, 'right');
        _this2.setKeyMap(downKeys, 'down');
        _this2.setKeyMap(leftKeys, 'left');

        _this2.lastAction = 'none';

        _this2.moveSpeed = 200;

        _this2.walkable = true;
        _this2.dynamic = true;

        if (!Engine) {
            console.error('Player.constructor: Engine class is not defined.');
        } else if (!(Engine.instance instanceof Engine)) {
            console.error('Player.constructor: There is no Engine instance to subscribre to.');
        } else {
            _this2.engine = Engine.instance;
            if (subscribeToEngine) {
                _this2.subscribeToEngine();
            }
        }
        return _this2;
    }

    _createClass(Player, [{
        key: 'setKeyMap',
        value: function setKeyMap(keys, action) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    this.keyMap.set(key, action);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: 'subscribeToEngine',
        value: function subscribeToEngine() {
            this.engine.registerKeyEventCallback(this.handleKeyEvents.bind(this));
            this.engine.registerUpdateCallback(this);
        }
    }, {
        key: 'handleKeyEvents',
        value: function handleKeyEvents(event) {
            if (event.keyCode && this.keyMap.has(event.keyCode)) {
                var action = this.keyMap.get(event.keyCode);

                if (event.type == 'keyup') {
                    action += 'Cancel';
                }

                this.performAction(action);
            }
        }
    }, {
        key: 'onCollisionCheck',
        value: function onCollisionCheck(otherGameObject) {
            if (!otherGameObject.walkable) {
                var myBorder = void 0;
                var targetBorder = otherGameObject.border;

                if (this.step[0] != 0) {
                    myBorder = this.border;
                    myBorder.left += this.step[0];
                    myBorder.right += this.step[0];

                    if (otherGameObject.hasCollided(myBorder)) {
                        if (this.step[0] > 0) {
                            this.step[0] += targetBorder.left - myBorder.right - 1;
                        } else {
                            this.step[0] += targetBorder.right - myBorder.left + 1;
                        }
                    }
                }

                if (this.step[1] != 0) {
                    myBorder = this.border;
                    myBorder.top += this.step[1];
                    myBorder.bottom += this.step[1];

                    if (otherGameObject.hasCollided(myBorder)) {
                        if (this.step[1] > 0) {
                            this.step[1] += targetBorder.bottom - myBorder.top - 1;
                        } else {
                            this.step[1] += targetBorder.top - myBorder.bottom + 1;
                        }
                    }
                }
            }
        }
    }, {
        key: 'performAction',
        value: function performAction() {
            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'none';

            if (this.lastAction != action) {
                switch (action) {
                    case 'up':
                        this.vy = this.moveSpeed;
                        break;
                    case 'upCancel':
                        if (this.vy > 0) {
                            this.vy = 0;
                        }
                        break;
                    case 'right':
                        this.vx = this.moveSpeed;
                        break;
                    case 'rightCancel':
                        if (this.vx > 0) {
                            this.vx = 0;
                        }
                        break;
                    case 'down':
                        this.vy = -this.moveSpeed;
                        break;
                    case 'downCancel':
                        if (this.vy < 0) {
                            this.vy = 0;
                        }
                        break;
                    case 'left':
                        this.vx = -this.moveSpeed;
                        break;
                    case 'leftCancel':
                        if (this.vx < 0) {
                            this.vx = 0;
                        }
                        break;
                    case 'none':
                        break;
                    default:
                }

                this.lastAction = action;
            }
        }
    }]);

    return Player;
}(GameObject);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Render = function () {
    function Render(canvas) {
        _classCallCheck(this, Render);

        if (Render.instance instanceof Render) {
            console.error('Render.constructor: Render instance already exists.');
            return null;
        }

        if (!(canvas instanceof HTMLCanvasElement)) {
            console.error("Render.constructor: given canvas object is not an HTMLCanvasElement.");
            return null;
        }

        Render.instance = this;

        this.canvas = canvas;
        this.context2D = this.canvas.getContext('2d');

        this.updateCanvasSize();

        window.addEventListener('resize', this.updateCanvasSize);

        // Coordinate sytem. Axis orientation will be: X->right , Y->up
        this.originX = 0.5;
        this.originY = 0.5;

        this.coordOffsetX = 0;
        this.coordOffsetY = 0;

        this.objectSet = new Set();

        this.drawTileGrid = false;
        this.drawBorders = false;
        this.drawTileHighlight = false;
    }

    _createClass(Render, [{
        key: 'canvasPositionToRenderCoordinates',
        value: function canvasPositionToRenderCoordinates(position) {
            if (position instanceof Array && position.length == 2 && typeof position[0] == 'number' && typeof position[1] == 'number') {
                var realOrigin = this.realOrigin;

                return [position[0] - realOrigin[0], realOrigin[1] - position[1]];
            } else {
                console.error('set Render.canvasPositionToRenderCoordinates: position is not an array of size 2 that contains numbers.');
                return null;
            }
        }
    }, {
        key: 'mousePositionToCanvasRelativePosition',
        value: function mousePositionToCanvasRelativePosition(mousePosition) {
            var canvasRect = this.canvas.getBoundingClientRect();

            return [mousePosition[0] - canvasRect.left, mousePosition[1] - canvasRect.top];
        }
    }, {
        key: 'mousePositionToRenderCoordinates',
        value: function mousePositionToRenderCoordinates(mousePosition) {
            return this.canvasPositionToRenderCoordinates(this.mousePositionToCanvasRelativePosition(mousePosition));
        }
    }, {
        key: 'mousePositionToTileCoordinates',
        value: function mousePositionToTileCoordinates(mousePosition) {
            if (!Terrain) {
                console.error('Render.mousePositionToTileCoordinates: Terrain class is not defined.');
            } else if (!(this.terrain instanceof Terrain)) {
                console.error('Render.mousePositionToTileCoordinates: terrain is not set.');
            } else {
                var realOrigin = this.realOrigin;
                var relativeCanvasPosition = this.mousePositionToCanvasRelativePosition(mousePosition);

                var coordinates = [0.5 + (relativeCanvasPosition[0] - realOrigin[0]) / this.terrain.tileSizeX, -0.5 + (realOrigin[1] - relativeCanvasPosition[1]) / this.terrain.tileSizeY];

                return [Math.floor(coordinates[0]), Math.ceil(coordinates[1])];
            }
        }
    }, {
        key: 'updateCanvasSize',
        value: function updateCanvasSize() {
            var containerStyle = window.getComputedStyle(this.canvas.parentElement);

            this.canvas.width = parseFloat(containerStyle.width) - parseFloat(containerStyle.paddingLeft) - parseFloat(containerStyle.paddingRight) - parseFloat(containerStyle.borderLeftWidth) - parseFloat(containerStyle.borderRightWidth);
            this.canvas.height = parseFloat(containerStyle.height) - parseFloat(containerStyle.paddingTop) - parseFloat(containerStyle.paddingBottom) - parseFloat(containerStyle.borderTopWidth) - parseFloat(containerStyle.borderBottomWidth);
        }
    }, {
        key: 'registerObject',
        value: function registerObject(imageObject) {
            if (!ImageObject) {
                console.error('Render.registerObject: ImageObject class is not defined.');
            } else if (!(imageObject instanceof ImageObject)) {
                console.error('Render.registerObject: imageObject is not a ImageObject object.');
            } else {
                this.objectSet.add(imageObject);
            }
        }
    }, {
        key: 'unregisterObject',
        value: function unregisterObject(imageObject) {
            if (!ImageObject) {
                console.error('Render.registerObject: ImageObject class is not defined.');
            } else if (!(imageObject instanceof ImageObject)) {
                console.error('Render.registerObject: imageObject is not a ImageObject object.');
            } else {
                this.objectSet.delete(imageObject);
            }
        }
    }, {
        key: 'setTerrain',
        value: function setTerrain(terrain) {
            if (!Terrain) {
                console.error('Render.setTerrain: Terrain class is not defined.');
            } else if (!(terrain instanceof Terrain)) {
                console.error('Render.setTerrain: terrain is not a Terrain object.');
            } else {
                this.terrain = terrain;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);

            this.renderTerrain();

            if (this.drawTileGrid) {
                this.renderTileGrid();
            }

            this.renderObjects();
        }
    }, {
        key: 'renderTerrain',
        value: function renderTerrain() {
            var realOrigin = this.realOrigin;

            this.context2D.fillStyle = 'rgba(255, 255, 255, 0.4)';

            if (this.terrain) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.terrain.tiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var tile = _step.value;

                        var tilePosition = [(realOrigin[0] + (tile.row - 0.5) * this.terrain.tileSizeX).toFixed(), (realOrigin[1] - (tile.column + 0.5) * this.terrain.tileSizeY).toFixed()];

                        if (tile.sprite) {
                            this.context2D.drawImage(tile.sprite, tilePosition[0], tilePosition[1], this.terrain.tileSizeX.toFixed(), this.terrain.tileSizeY.toFixed());
                        }

                        if (this.drawTileHighlight && tile.highlighted) {
                            this.context2D.fillRect(tilePosition[0], tilePosition[1], this.terrain.tileSizeX.toFixed(), this.terrain.tileSizeY.toFixed());
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: 'renderObjects',
        value: function renderObjects() {
            var realOrigin = this.realOrigin;

            var objectSize = void 0,
                objectBorder = void 0;

            this.context2D.strokeStyle = 'purple';
            this.context2D.lineWidth = 2;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = _.chain([].concat(_toConsumableArray(this.objectSet))).sortBy('y').reverse().sortBy('layer').value()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var objectToRender = _step2.value;

                    if (objectToRender.mayRender()) {
                        objectSize = objectToRender.size;
                        this.context2D.drawImage(objectToRender.sprite, (realOrigin[0] + objectToRender.x - objectToRender.pivotX * objectSize[0]).toFixed(), (realOrigin[1] - (objectToRender.y + (1 - objectToRender.pivotY) * objectSize[1])).toFixed(), objectSize[0].toFixed(), objectSize[1].toFixed());

                        if (this.drawBorders) {
                            if (!GameObject) {
                                console.error('Render.renderObjects: GameObject class not defined.');
                            } else if (objectToRender instanceof GameObject) {
                                objectBorder = objectToRender.border;
                                this.context2D.strokeRect(realOrigin[0] + objectBorder.left, realOrigin[1] - objectBorder.top, objectToRender.borderWidth, objectToRender.borderHeight);
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: 'renderTileGrid',
        value: function renderTileGrid() {
            if (this.terrain) {
                this.context2D.strokeStyle = 'white';
                this.context2D.lineWidth = 1;

                var realOrigin = this.realOrigin;

                var minX = Math.ceil(0.5 - realOrigin[0] / this.terrain.tileSizeX);
                var maxX = Math.floor(0.5 + (this.canvas.width - realOrigin[0]) / this.terrain.tileSizeX);

                var minY = Math.ceil(-0.5 + (realOrigin[1] - this.canvas.height) / this.terrain.tileSizeY);
                var maxY = Math.floor(-0.5 + realOrigin[1] / this.terrain.tileSizeY);

                this.context2D.beginPath();

                var loackedPosition = 0;

                for (var i = minX; i <= maxX; i++) {
                    loackedPosition = (realOrigin[0] + (i - 0.5) * this.terrain.tileSizeX).toFixed();
                    this.context2D.moveTo(loackedPosition, 0);
                    this.context2D.lineTo(loackedPosition, this.canvas.height);
                }

                for (var j = minY; j <= maxY; j++) {
                    loackedPosition = (realOrigin[1] - (j + 0.5) * this.terrain.tileSizeY).toFixed();
                    this.context2D.moveTo(0, loackedPosition);
                    this.context2D.lineTo(this.canvas.width, loackedPosition);
                }

                this.context2D.stroke();
            }
        }
    }, {
        key: 'origin',
        get: function get() {
            return [this.originX, this.originY];
        },
        set: function set(origin) {
            if (origin instanceof Array && origin.length == 2 && typeof origin[0] == 'number' && typeof origin[1] == 'number') {
                this.originX = origin[0];
                this.originY = origin[1];
            } else {
                console.error('set Render.origin: origin is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'coordOffset',
        get: function get() {
            return [this.coordOffsetX, this.coordOffsetY];
        },
        set: function set(coordOffset) {
            if (coordOffset instanceof Array && coordOffset.length == 2 && typeof coordOffset[0] == 'number' && typeof coordOffset[1] == 'number') {
                this.coordOffsetX = coordOffset[0].toFixed();
                this.coordOffsetY = coordOffset[1].toFixed();
            } else {
                console.error('set Render.coordOffset: coordOffset is not an array of size 2 that contains numbers.');
            }
        }
    }, {
        key: 'realOrigin',
        get: function get() {
            return [this.originX * this.canvas.width + this.coordOffsetX, (1 - this.originY) * this.canvas.height - this.coordOffsetY];
        }
    }]);

    return Render;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageResourceStatus = {
    INITIATING: 'Initiating',
    FAILED: 'Failed',
    LOADING: 'Loading',
    LOADED: 'Loaded'
};

var ImageResource = function () {
    function ImageResource() {
        _classCallCheck(this, ImageResource);

        this.progress = 0;
        this.status = ImageResourceStatus.INITIATING;
        this.onLoad = null;
        this.onProgress = null;
        this.onStatusChanged = null;
    }

    _createClass(ImageResource, [{
        key: 'setProgress',
        value: function setProgress(progress) {
            this.progress = progress;

            console.log('ImageResource.setProgress: ' + progress);

            if (this.onProgress) {
                this.onProgress(this.progress);
            }
        }
    }, {
        key: 'setStatus',
        value: function setStatus(status) {
            this.status = status;

            if (this.onStatusChanged) {
                this.onStatusChanged(this.status);
            }

            switch (this.status) {
                case ImageResourceStatus.INITIATING:
                    break;

                case ImageResourceStatus.FAILED:
                    break;

                case ImageResourceStatus.LOADING:
                    break;

                case ImageResourceStatus.LOADED:
                    this.setProgress(1);
                    if (this.onLoad) {
                        this.onLoad();
                    }
                    break;

                default:
            }
        }
    }, {
        key: 'setTriggers',
        value: function setTriggers() {
            var _this = this;

            if (this.img) {
                this.promise = new Promise(function (resolve, reject) {
                    _this.img.onloadstart = function () {
                        _this.setStatus(ImageResourceStatus.LOADING);
                    };
                    _this.img.onprogress = function (progress) {
                        _this.progress = _this.setProgress(progress);
                    };
                    _this.img.onload = function () {
                        _this.setStatus(ImageResourceStatus.LOADED);
                        resolve(_this);
                    };
                    _this.img.onerror = function (error) {
                        _this.setStatus(ImageResourceStatus.FAILED);
                        reject(error);
                    };
                });
            }
        }
    }, {
        key: 'setSource',
        value: function setSource(source, alias) {
            var _this2 = this;

            if (source) {
                if (source instanceof Image) {
                    if (source.src) {
                        if (alias) {
                            this.alias = alias;
                        }

                        this.imageSrc = source.src;
                        this.img = source;

                        if (source.complete) {
                            this.setStatus(ImageResourceStatus.LOADED);

                            return new Promise(function (resolve, reject) {
                                resolve(_this2);
                            });
                        } else {
                            this.setTriggers();
                        }
                    } else {
                        console.error('ImageResource requires a proper source.');
                    }
                } else if (typeof source == 'string') {
                    if (alias) {
                        this.alias = alias;
                    }

                    this.imageSrc = source;
                    this.img = new Image();

                    this.setTriggers();

                    this.img.src = source;
                }

                return this.promise;
            } else {
                console.error('ImageResource requires a proper source.');
            }
        }
    }, {
        key: 'loaded',
        get: function get() {
            return this.status == ImageResourceStatus.LOADED;
        }
    }], [{
        key: 'IMAGE_STATUS',
        get: function get() {
            return ImageResourceStatus;
        }
    }]);

    return ImageResource;
}();

var Resources = function () {
    function Resources() {
        _classCallCheck(this, Resources);

        this.imageCache = new Map();
    }

    /**
    * @method addImage - Add an image resource and starts loading it if possible.
    * @param {Object|string} imgSource - image source. It may be an img element object or the img url string.
    * @param {string} [alias] - image alias used to retrieve resource. if imgSource is a string and alias is not specified, then the alias will be set to the imgSource.
    * @return {Promisse} - promise that fullfills when the resource has loaded.
    */


    _createClass(Resources, [{
        key: 'addImage',
        value: function addImage(imgSource, alias) {
            if (typeof imgSource == 'string' && !alias) {
                alias = imgSource;
            }

            var newImageResource = new ImageResource();

            if (!alias) {
                console.log('Resources.addImage: alias not set and thus this image will not be cached!');
            } else {
                if (this.imageCache.has(alias)) {
                    window.alert('Resources.addImage: image alias "' + alias + '" is already being used and will be overwritten.');
                }

                this.imageCache.set(alias, newImageResource);
            }

            return newImageResource.setSource(imgSource, alias);
        }

        /**
        * @method addImages - Same as addImage but for multple image resources.
        * @param {Array} sources - each element should be an array that matches the arguments of the addImage method: [imgSource, alias].
        * @return {Promisse} - promise that fullfills when all resources have loaded.
        */

    }, {
        key: 'addImages',
        value: function addImages(sources) {
            if (!(sources instanceof Array)) {
                console.error('Resources.addImages: argument is not an array');

                return;
            }

            var promises = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    if (entry instanceof Array) {
                        promises.push(this.addImage.apply(this, entry));
                    } else {
                        promises.push(this.addImage(entry));
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return Promise.all(promises);
        }
    }, {
        key: 'getOrAddImage',
        value: function getOrAddImage(imgSource, alias) {
            if (typeof imgSource == 'string' && !alias) {
                alias = imgSource;
            }

            var newImageResource = new ImageResource();

            if (!alias) {
                console.log('Resources.addImage: alias not set and thus this image will not be cached!');
            } else {
                var cache = this.imageCache.get(alias);

                if (cache) {
                    return new Promise(function (resolve, reject) {
                        resolve(cache);
                    });
                }
            }

            this.imageCache.set(alias, newImageResource);

            return newImageResource.setSource(imgSource, alias);
        }
    }, {
        key: 'getOrAddImages',
        value: function getOrAddImages(sources) {
            if (!(sources instanceof Array)) {
                console.error('Resources.addImages: argument is not an array');

                return;
            }

            var promises = [];

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = sources[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var entry = _step2.value;

                    if (entry instanceof Array) {
                        promises.push(this.getOrAddImage.apply(this, entry));
                    } else {
                        promises.push(this.getOrAddImage(entry));
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return Promise.all(promises);
        }

        /**
        * @method getImage - returns the img element object respective to the given alias.
        */

    }, {
        key: 'getImage',
        value: function getImage(alias) {
            var cache = this.imageCache.get(alias);

            if (!cache) {
                console.error('Resources.getImage: could not find alias "${alias}"');
            }

            return cache;
        }
    }]);

    return Resources;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tile = function Tile(row, column, sprite) {
    _classCallCheck(this, Tile);

    if (sprite instanceof Image) {
        this.sprite = sprite;
    } else if (sprite) {
        console.error('Tile.constructor: sprite is not a Image object.');
        return null;
    }

    row = Number(row.toFixed());
    column = Number(column.toFixed());

    if (typeof row == 'number' && typeof column == 'number') {
        this.row = row;
        this.column = column;
    } else {
        console.error('Tile.constructor: row and column must be numbers.');
        return null;
    }

    this.highlighted = false;
};

var Terrain = function () {
    function Terrain() {
        _classCallCheck(this, Terrain);

        this.tileSizeX = 64;
        this.tileSizeY = 64;

        this.tileMap = new Map();
        this.tileHighlightMap = new Map();
    }

    _createClass(Terrain, [{
        key: 'setTile',
        value: function setTile(tile) {
            if (!(tile instanceof Tile)) {
                console.error('Terrain.setTile: tile is not a Tile object.');
            } else {
                this.tileMap.set(tile.row + 'x' + tile.column, tile);
            }
        }
    }, {
        key: 'setTiles',
        value: function setTiles(tiles) {
            if (!(tiles instanceof Array)) {
                console.error('Terrain.setTiles: tiles is not an Array.');
            } else {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = tiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var tile = _step.value;

                        this.setTile(tile);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: 'setTileHighlight',
        value: function setTileHighlight(row, column) {
            var highlighted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (typeof row == 'number' && typeof column == 'number' && typeof highlighted == 'boolean') {
                var tile = this.tileMap.get(row + 'x' + column);
                if (!tile) {
                    tile = new Tile(row, column);
                    this.setTile(tile);
                }

                tile.highlighted = highlighted;

                return tile;
            } else {
                console.error('Terrain.setTileHighlight: row and column must be numbers and highlighted must be a boolean.');
            }

            return null;
        }
    }, {
        key: 'clear',
        value: function clear() {
            this.tileMap.clear();
            this.tileHighlightMap = new Map();
        }
    }, {
        key: 'tiles',
        get: function get() {
            return [].concat(_toConsumableArray(this.tileMap.values()));
        }
    }, {
        key: 'tileSize',
        get: function get() {
            return [this.tileSizeX, this.tileSizeY];
        },
        set: function set(tileSize) {
            if (tileSize instanceof Array && tileSize.length == 2 && typeof tileSize[0] == 'number' && typeof tileSize[1] == 'number') {
                this.tileSizeX = tileSize[0];
                this.tileSizeY = tileSize[1];
            } else {
                console.error('set Terrain.tileSize: tileSize is not an array of size 2 that contains numbers.');
            }
        }
    }]);

    return Terrain;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
